* p.2 Introduction

『必要になった時にキーワードを思い出して自分で調べられように』との目標が書かれているが、
それはgreatサイボウズ様の高い基準。
僕たち庶民は、まずは眺めよう。

* p.3

もはや多くの物事が「webアプリ」で動いていて、空気のようになっており、
わざわざ「webアプリ」という言葉を使う必要がないかもしれない。

** webアプリの例

- google docs
- google メール（gmail）
- google スプレッドシート
- slack（ウェブブラウザ版）
- meet（ウェブブラウザ版）

◆問い掛け: そのほかのwebアプリが何か思い浮かびますか？

** 「ネイティブアプリ」、「デスクトップアプリ」

単一のPC内で処理が完結し得るアプリ

*** ネイティブアプリの例

- Microsoft Office の Word
- Microsoft Office の Outlook
- Microsoft Office の Excel

◆問い掛け: そのほかのネイティブアプリが何か思い浮かびますか？

** ハイブリッドも多い
『内部的にはWebアプリが提供するAPIを叩いている場合も』と書かれているように……

- 一部はPC内で処理される。一部はインターネットの向こう側のサーバーで処理される。
- 自動的にインターネット上（クラウド上）にバックアップされ、簡便・安心なことが多い。
  - 例
    - chrome や firefox の プロファイル機能
    - スマフォの写真アプリ

* p.6 Webサーバー

『Apache, IIS, nginx...』と書かれているのは、Webサーバーとして動くソフトウェアの名称の一例。
もはや、一般プログラマーが直接触る機会が少ないので、とりあえず読み飛ばし。

* p.7 Webサーバーがやること

- 下段の見出しとして、唐突に『通信と計算のセット』と書かれているのは、
  上段の3つの見出しを要約すると『通信と計算のセット』になるから。
  | リクエストを受け付ける     | 通信 |
  | 結果を(読み込む、計算する) | 計算 |
  | 結果を送り返す             | 通信 |
- 下段の小見出しで『入力+計算+出力…』と書かれているのは、
  「通信」を方向の観点で分解すると、入力方向の「通信」と、出力方向の「通信」に分解できるから。
- 『プログラムの本質』の両端が「通信」であるということは、
  「通信」を学ぶことは、webアプリに関わらず、全てのITシステム構築者に取って重要であるということ。

* p.8 ～ p.10 Socket

◆問い掛け: TCPとは？
◆問い掛け: UDPとは？
◆問い掛け: TCPとUDPはどのように使い分けるべきか？

- Protocol
  - 合意された手順、規範。または、具体的に各人の間で合意されていなくても、従うべきとの同調圧力が強いもの。
  - 通信以外の場でも使われる。
    - 大規模災害発生時の、総理大臣と各大臣の行政上のプロトコル
    - 宇宙飛行士が大気圏に突入するときのプロトコル
    - 皇室晩餐会に出席するときの服装、髪型、装飾品のプロトコル
- 簡素な手順であり、明瞭。
  - 実装が簡単。
  - 世界に広まりやすい。

* p.11、12 複数のリクエストが来たら & 同時に複数のリクエストを捌く

『複数のリクエストが来たら』を言い換えると、
「writeやreadに時間が掛かり、次にacceptすべきリクエストが溜まってしまったら」

* p.13 プロセス

- 楽天での買い物を例として考える。
  - 鈴木さんの決済処理と佐藤さんの決済処理は相互に独立していなければならない。
    - 別々のプロセスとして処理する。

- 『ソケットを引き継ぐ』の意味（の早川なりの推論）
  - ウェブブラウザに結果を送り返す通信に主体がプロセスであるということ。
    - プロセスが異常終了したら、ウェブブラウザに何も返されないかもしれない。
    - スレッドの結果を待たず、プロセスの判断で、ウェブブラウザに何かが返されるかもしれない。

* p.14 スレッド

- 楽天での買い物を例として考える。
  - 鈴木さんの決済処理と、それに伴うポイントの付与は、連携させたほうが実装が簡単・シンプルになる。
    - 同一プロセス内の、別々のスレッドとして処理する。

* p.15

- C10K問題、僕も知らない。
  - → 非同期I/Oなどを調べてみよう。

* p.17 動的なWebページ

webアプリケーションの機能・特色 = 途中の Process の部分で何をするか？

* p.18 CGI: Common Gateway Interface

古い話。読み飛ばし可。

* p.19 Webアプリケーションサーバー

- 「2層式」Webアプリケーション
  - 以下の2つの要素から構成されるwebアプリケーション
    - Webサーバー
    - Webアプリケーションサーバー

* p.20 永続化/データベース

- 「3層式」Webアプリケーション
  - 以下の3つの要素から構成されるwebアプリケーション
    - Webサーバー
    - Webアプリケーションサーバー
    - データベース
- DBMS は DataBase Management System の略称

* p.21 データベース管理システム(DBMS)

- RDBMS / SQL
  - これを教えるだけオオゴト。
    - 大学で言えば、1週間の間に講義議&演習（実習）の2コマが、1年間 ＝ 合計8単位。
    - （教えてくれないまま、社外に常駐させるような会社は早く辞めること。）
- NoSQL
  - 『大抵速いが…』の記述の背景: スマートフォンが当たり前になり、高性能PCを常時携帯するようになったので、
    世間に求められる処理のスピードが増してきた。
  - "NO SQL"「SQLではない」 ではなく、Not Only SQL「SQL以外」（の選択肢も考えよう、使ってみよう）の意味。

* p.22 ログイン

◆『どう実現する？』を考えてみよう。原理的（紙にペンで書ける簡素さ）でOK。

* p.23 Cookie (RFC 6265)

- Cookieの読みは「クッキー」
- 発展の歴史としては、まずは単純に「ログインしているかどうか」などの情報をクライアント（ウェブブラウザ）側に持たせた。
  - 『HTTPが状態を持つことができる』
    - 『状態を持つ』性質を「ステートフル stateful」といったりする。
      - 例：【今すぐ買う】ボタンを押したときの動作は状態に応じて変わる。
        - ログイン済みの場合 --> すぐに決済処理に進む。
        - ログインが未だの場合 --> 一旦ログイン画面に遷移する。

* p.24 セッション

- セッションとクッキーに違い？ 使い分けの基準？
  - by 早川: 一旦理解したつもりになったが、すぐに忘れた。TODO。

* p.25、26 パスワードの保存

- パスワードは そのままの文字列を保存してはダメ。
  - 大原則
  - さもなくば 会社が倒産。
- 『パスワードはハッシュ関数を通したハッシュ値を保存する』
- ハッシュ関数？ハッシュ値？
  - ◆簡単はハッシュの例をググってみよう！

** ハッシュ値と暗号化の違い = 復号できるかどうか?

| ハッシュ値 | 復号できない |
| 暗号化     | 復号できる   |

* p.27 HTTPS

- HTTPS = Secure な HTTP
- 前提として、HTTP（Hypertext Transfer Protocol）がありました。
  1. 当初は全ての通信内容が平文（暗号さされていない、生（ナマ）の文字列）として送受信されていた。
    - 秘匿情報を送受信するには、パスワード付きzipで固めて、パスワードは電話で伝える、といった手間がかかっていた。
  2. インターネットの発展とともに、秘匿情報を送受信する手間を自動化する要望が高まっていった。
  3. HTTPSの登場！

* p.30 Webアプリケーションフレームワーク

- フレームワークを使う利点
  - セキュリティの担保が簡便
  - ありがちな機能が実装済み、または非常に簡便に実装できる。
- フレームワークの栄枯盛衰
  - 流れ
    1. ある時点で、便利なフレームワークを使って、Webアプリケーションを構築する。
    2. もっと便利なフレームワークが登場する。
    3. 古いフレームワークをいじれる技術者が減る、もしくは学習のモチベーションが下がる。
    4. 古いフレームワークが使われているので、改修したいが、改修に踏み切れず、「負の遺産」となる。
  - 理想
    - 日進月歩を常時キャッチアップし続ける体制を維持する。
    - 専門家（計算機科学修士号 以上）なら、ガラッと大きく改修できる、らしい。
      - ビッグテック（Google, MS, Amazon, Facebook, Adobe, Nvidai）などでは、そうらしい。

* p.31～35 フロントエンド

** 用語
*** フロントエンド
- "Front-End"
- ウェブブラウザで処理される内容のこと
- フロントエンド言語のソースのこと
  - HTML
  - CSS
  - javascript
- ウェブブラウザのことそのもの
*** バックエンド
- "Back-End"
- サーバーで処理される内容のこと
- バックエンド言語のソースのこと
  - php
  - java
  - などなど
- サーバーそのもの
*** 異口同音

| 場所           | 異口同音           |
|----------------+--------------------|
| フロントエンド | クライアントサイド |
| バックエンド   | サーバーサイド     |

** HTML と CSS と javascript の区別

WEBサイトの作り方！HTMLとCSSとJavascriptって、結局なんなの？ | ノマクリ
https://www.nomad-creator.com/blog/2019/11/webhtmlcssjavascript.html

- HTML = 文章の構造（大見出し、中見出し、小見出しなど）
- CSS  = 見た目
  - 静的な見た目 と 動的な見た目（マウスやキーボードで操作された時など）
  - 例: 大見出しは番号と太字＋下線、中見出しは番号と下線、小見出しは番号のみ
  - 当初は JavaScriptを必要としていたが、CSSだけで
- JavaScript
  - 動的な処理（interaction、インタラクション、インターアクション）
    - CSSの動的な見た目との違いは、CSSは見た目に限定されること（？）
    - DOM操作
      - HTML の要素の削除・追加・変更
      - Document Object Model (DOM)
    - 通信

** 重要『意味と見た目を分離する』、『HTMLには見た目を書かない』（p.34）

* p.36 Web API

** webアプリケーション と Web APIとの違い?

|                          | Web アプリケーション                                            | Web API          |                                                                                                    |
|--------------------------+-----------------------------------------------------------------+------------------+----------------------------------------------------------------------------------------------------|
| 実行者                   | 人間                                                            | プログラム（※）  | ※
| クライアント側への返り値 | ウェブブラウザ上での見栄えの良い描画                            | 実行結果のデータ |                                                                                                    |
| 部分と全体               | アプリ全体を成立させるための機能の一部として Web API が使われる |                  |                                                                                                    |

*** 実行者
- Web アプリケーション
  - 人間
- Web API
  - プログラム
  - 人間（プログラマー）ができるのは、プログラムがWeb APIを実行するように、予め実装しておくことのみ。
*** クライアント側への返り値
- Web アプリケーション
  - 処理結果が見栄え良く描画されたページ
- Web API
  - 処理結果のデータのみ
*** 部分と全体
- Web アプリケーション
  - アプリを成立させるために、特定の機能を Web API で処理する
  - 『サーバーとクライアントの分離が出来てシンプルになる傾向』（p.36）
    - サーバーはビジネスロジックを実行する場
    - クライアント（ウェブブラウザ）はビジネスロジックの結果を人間が確認する場
      - 人間にとって確認し易いような見た目にするのは、クライアントサイド（ウェブブラウザ）
        - 航空チケットの購入を Web APIを使って処理した後の、クライアントでの描画のパターン
          - 日時、離陸場所、着陸場所、決済IDなどを表形式で描画するパターン
          - "決済完了" とのみ描画（表示）されるパターン
        - 金額の例：Web API のレスポンスではドル建てで返され、クライアント（ウェブブラウザ）ではユーザーの国の貨幣に変換される。
        - 時刻の例：Web API の レスポンスではUTC（世界標準時）で返され、クライアント（ウェブブラウザ）ではユーザーの地域の時刻に変換される。
